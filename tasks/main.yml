---
- name: "set tinc-boot arch"
  set_fact:
    tinc_boot_arch: "{{tinc_boot_archs.get(ansible_architecture, ansible_architecture)}}"
- name: "create bin dir"
  file:
    state: directory
    path: "{{tinc_boot_bin_dir}}"

- name: "install dependencies"
  include_tasks: "{{item}}"
  with_first_found:
    - "deps_{{ansible_distribution | lower}}_{{ ansible_distribution_major_version}}.yml"
    - "deps_{{ansible_distribution | lower}}.yml"
    - "deps.yml"

- name: "install tinc-boot"
  unarchive:
    dest: "{{tinc_boot_bin_dir}}"
    mode: a+x
    creates: "{{tinc_boot_bin_dir}}/tinc-boot"
    src: "https://github.com/reddec/tinc-boot/releases/latest/download/tinc-boot_linux_{{tinc_boot_arch}}.tar.gz"
    remote_src: yes
    extra_opts:
    - tinc-boot
- name: "create tinc-boot network"
  command: >
    {{tinc_boot_bin_dir}}/tinc-boot gen
    --dir "{{tinc_boot_tinc_dir}}"
    --name {{tinc_boot_name}}
    --network {{tinc_boot_network}}
    --standalone
    --no-bin-copy
    --bin {{tinc_boot_bin_dir}}/tinc-boot
    --port {{tinc_boot_port}}
    --mask {{tinc_boot_mask}}
    --prefix {{tinc_boot_prefix}}
    {%for public in tinc_boot_public%}--public {{public}}{%endfor%}
  args:
    creates: "{{tinc_boot_tinc_dir}}/{{tinc_boot_network}}"
- name: "exchange keys with entry nodes {{tinc_boot_entry_group}}"
  block:
    - include_tasks: exchange_keys.yml
      with_items: "{{groups[tinc_boot_entry_group]}}"
  when: "tinc_boot_entry_group != ''"
- name: "enabling services"
  include_tasks: "{{item}}"
  with_first_found:
    - "service_{{ansible_distribution | lower}}_{{ ansible_distribution_major_version}}.yml"
    - "service_{{ansible_distribution | lower}}.yml"
    - "service.yml"
  when: tinc_boot_services
- name: "create bootnode"
  include_tasks: bootnode.yml
  when: tinc_boot_bootnode